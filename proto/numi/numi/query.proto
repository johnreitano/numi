syntax = "proto3";
package johnreitano.numi.numi;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "numi/numi/params.proto";
import "numi/numi/user.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/johnreitano/numi/x/numi/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/johnreitano/numi/numi/params";
  }
  // Queries a User by index.
	rpc User(QueryGetUserRequest) returns (QueryGetUserResponse) {
		option (google.api.http).get = "/johnreitano/numi/numi/user/{userId}";
	}

	// Queries a list of User items.
	rpc UserAll(QueryAllUserRequest) returns (QueryAllUserResponse) {
		option (google.api.http).get = "/johnreitano/numi/numi/user";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetUserRequest {
	  string userId = 1;

}

message QueryGetUserResponse {
	User user = 1 [(gogoproto.nullable) = false];
}

message QueryAllUserRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllUserResponse {
	repeated User user = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
